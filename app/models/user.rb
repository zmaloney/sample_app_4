# NB that the following annotation was generated by the annotate gem : 
# bundle exec annotate --position before
# adds comments re. the data model to the model file. 

# == Schema Information
#
# Table name: users
#
#  id         :integer          not null, primary key
#  name       :string(255)
#  email      :string(255)
#  created_at :datetime
#  updated_at :datetime
#

class User < ActiveRecord::Base
  
  # Interestingly, annotate doesn't like me adding the attr_accessible line, 
  # which the Rails tutorial suggested I add. 
  # apparently, it's been "extracted out of Rails into a gem."
  
  #the has_secure_password line gives us our password attributes for free (password, password_confirmation) 
  # NB that password and password_confirmation are virtual -- only exist temporarily in memory. 
  has_secure_password  
  
  # note that we're supporting these items in the spec, so 
  # if these validations fail, the spec will let us know that the validation isn't working correctly. 
  
  validates :name, presence: true, length: { maximum: 50 } #NB that 'validates' is just a method like any other.
  validates :email, presence: true #and let's do the same for email. 
  validates :email, uniqueness: { case_sensitive: false } #enforce case-sensitive uniqueness on emails; case_sensitive implies "uniqueness: true"
  validates :password, presence: true, length: { minimum: 6 } #enforce a minimum password length of 6 
  
  #YUSSSSS it's regular expression time. Let's validate some emails. 
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i #Ruby convention : all caps = constant
  validates :email, format: { with: VALID_EMAIL_REGEX }
  
  #in order to make sure that uniqueness works correctly on emails, 
  # change emails to lowercase before saving. 
  # We can do this by setting the before_save callback with a downcase function. 
  # This is basically a belt-and-suspenders approach to handling the uniqueness problem -- it's dealt 
  # with at the validates: level and at the saving level with the db ID constraint.
  before_save { |user| user.email = email.downcase }
  #and implement a before_save callback to create remember_token
  before_save :create_remember_token
  
  #here's the private method for creating a remember token ... no need to expose it outside our class
  private 
    def create_remember_token
      self.remember_token = SecureRandom.urlsafe_base64
    end
  
end
